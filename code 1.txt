import java.util.Scanner;

public class Word_Search {

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.print("Enter the dimension n where the table is n*n : ");
		int n = input.nextInt();
		System.out.println("\nNow enter the letters each one is seperated with a space form the next :");
		char [][] table = new char [n][n];
		for (int i = 0 ; i < n ; i++ ) {
			for (int j = 0 ; j < n ; j++) {
				table[i][j] = input.next().charAt(0);
			}
		}
		System.out.print("Enter the number of words you would like to search for in the table :");
		int countWords = input.nextInt();
		System.out.println("\nEnter the words in the next line seperated by spaces :");
		String [] words = new String [countWords];
		for ( int i = 0 ; i < countWords ; i++) {
			words[i] = input.next();
		}
		searchWords(table, words);
		input.close();
	}

	private static void searchWords(char [][] table , String [] words) {
		for ( int i = 0 ; i < words.length ; i ++) {
			Boolean wordFound = false;
			for ( int x = 0 ; x < table.length ; x++) {
				for ( int y = 0 ; y < table.length ; y++) {
					if (words[i].charAt(0) == table[x][y]) {
						Boolean checkResult = checkWord(table, words[i] ,x, y);
						if (checkResult) {
							System.out.println("The word " + words[i] +" is found where the initial first letter of the word is found at x = " + x + " , y = " + y);
							wordFound = true;
							break;
						}
					}
				}
				if (wordFound)
					break;
			}
			if (!wordFound)
				System.out.println("The word " +  words[i] + " isn't found in the table");
		}
	}
	
	private static Boolean checkWord (char [][] table , String word , int x , int y) {
		int wordLength  = word.length();
		int bound = table.length;
		int constX = x;
		int constY = y;
		// Look at left
		for (int i = 0 ; i < wordLength ; i++) {
			if (y < 0)
				break;
			if (table[x][y] == word.charAt(i))
				y--;
			else
				break;
			if ( i == word.length() - 1 )
				return true;
		}
		x = constX;
		y = constY;
		// Look left up
		for (int i = 0 ; i < wordLength ; i++) {
			if (x < 0 || y < 0)
				break;
			if (table[x][y] == word.charAt(i)) {
				x--;
				y--;
			}
			else
				break;
			if ( i == word.length() - 1 )
				return true;
		}
		x = constX;
		y = constY;
		// Look up
		for (int i = 0 ; i < wordLength ; i++) {
			if ( x < 0)
				break;
			if (table[x][y] == word.charAt(i)) {
				x--;
			}
			else
				break;
			if ( i == word.length() - 1 )
				return true;
		}
		x = constX;
		y = constY;
		// Look up right
		for (int i = 0 ; i < wordLength ; i++) {
			if ( y >= bound || x <0)
				break;
			if (table[x][y] == word.charAt(i)) {
				y++;
				x--;
			}
			else
				break;
			if ( i == word.length() - 1 )
				return true;
		}
		x = constX;
		y = constY;
		// Look right
		for (int i = 0 ; i < wordLength ; i++) {
			if ( y == bound)
				break;
			if (table[x][y] == word.charAt(i)) {
				y++;
			}
			else
				break;
			if ( i == word.length() - 1 )
				return true;
		}
		x = constX;
		y = constY;
		// Look right down
		for (int i = 0 ; i < wordLength ; i++) {
			if ( x == bound || y == bound )
				break;
			if (table[x][y] == word.charAt(i)) {
				x++;
				y++;
			}
			else
				break;
			if ( i == word.length() - 1 )
				return true;
		}
		x = constX;
		y = constY;
		// Look down
		for (int i = 0 ; i < wordLength ; i++) {
			if ( x == bound )
				break;
			if (table[x][y] == word.charAt(i)) {
				x++;
			}
			else
				break;
			if ( i == word.length() - 1 )
				return true;
		}
		x = constX;
		y = constY;
		// Look down left
		for (int i = 0 ; i < wordLength ; i++) {
			if ( x == bound || y  < 0 )
				break;
			if (table[x][y] == word.charAt(i)) {
				x++;
				y--;
			}
			else
				break;
			if ( i == word.length() - 1 )
				return true;
		}
		return false;
	}
}